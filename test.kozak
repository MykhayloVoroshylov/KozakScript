Hetman

// Змінні та арифметика
a := 10;
b := 5;
c := a + b * 2;
Spivaty("a + b*2 =", c);

// Типи даних
x := Chyslo("42");
y := DroboveChyslo("3.14");
s := Ryadok(123);
flag := Logika(1);
Spivaty("Types:", x, y, s, flag);

// Логіка
if_check := Pravda && Nepravda || Pravda;
Spivaty("Logic check:", if_check);

// Умови
Yakscho(a > b) {
    Spivaty("a більший за b");
} Abo_Yakscho(a < b) {
    Spivaty("a менший за b");
} Inakshe {
    Spivaty("a дорівнює b");
}

// Цикли
i := 0;
Doki(i < 3) {
    Spivaty("While loop i:", i);
    i++;
}

Dlya(j := 0; j < 3; j := j + 1) {
    Spivaty("For loop j:", j);
}

// Масиви та for-each
arr := [1, 2, 3];
Spivaty("Original array:", arr);
Dlya val kozhen arr {
    Spivaty("For-each value:", val);
}
dodaty(arr, 4);
Spivaty("After append:", arr);
vstavyty(arr, 1, 99);
Spivaty("After insert:", arr);
Spivaty("Contains 2?", mistyt(arr, 2));
Spivaty("Index of 99:", index_z(arr, 99));
Spivaty("Slice arr[1:3]:", vyrizaty(arr, 1, 3));
Spivaty("Length of arr:", dovzhyna(arr));
vydalyty(arr, 1);
Spivaty("After remove index 1:", arr);
pop_val := vyinyaty(arr);
Spivaty("Popped value:", pop_val, "Array now:", arr);
ochystyty(arr);
Spivaty("After clear:", arr);

// Функції
Zavdannya greet(name) {
    Spivaty("Hello,", name);
    Povernuty Ryadok("Done greeting");
}

res := greet("Kozak");
Spivaty("Greet returned:", res);

// Робота з файлами
Zapysaty("test.txt", "Hello Kozak!"); // <---- Here
content := Chytaty("test.txt");
Spivaty("File content:", content);

// Введення
name := Slukhai("Enter your name: ");
Spivaty("You entered:", name);

// Степові та унарні операції
count := 0;
count++;
count--;
Spivaty("Count after ++ and --:", count);

// Степені та корені
Spivaty("2^3 =", 2^3);
Spivaty("27 ^/ 3 =", 27 ^/ 3);

// Рандом
rand_val := randint(1, 10);
Spivaty("Random value 1-10:", rand_val);

/* Comment 
    Comment */

Spivaty("No Comment");

// OOP
Klas Sobaka {
    Tvir(imya, vik) {
        tsey.imya := imya;
        tsey.vik := vik;
    }

    Zavdannya Bark() {
        Spivaty(tsey.imya + " woof!");
    }
}

sobaka := novyy Sobaka("Rex", 3);
sobaka.Bark();

//Словник
slovnyk := {"imya": "Bohdan", "vik": 30, "misto": "Kyiv"};
Spivaty(slovnyk["imya"]);

slovnyk["professiya"] := "Hetman";
Spivaty(slovnyk["professiya"]);

klyuchi_array := klyuchi(slovnyk);
Spivaty(klyuchi_array);

//Поліморфізм та наслідування
Klas Parent {
    Tvir() {
        tsey.field1 := "Parent field";
    }
    Zavdannya GetField1() {
        Spivaty("Parent method called!");
        Povernuty tsey.field1;
    }
}

Klas Child : Parent {
    Zavdannya GetField2() {
        Povernuty "Child field";
    }
}

my_object := novyy Child();
// These two lines are now simple statements that should require semicolons:
Spivaty(my_object.GetField1()); 
Spivaty(my_object.GetField2()); 



// Test 1
Sprobuy{
    x:= 10;
    y := 0;
    res := x/y;
    Spivaty("Res= ");
} Piymat(e){
    Spivaty("Error: ", e);
}

// Test 2
Sprobuy{
    arr2 := [1, 2, 3];
    Spivaty(arr[10]);
} Piymat(error_msg){
    Spivaty("Caught error: ", error_msg);
}

// Test 3
counter := 0;

Sprobuy {
    counter := counter + 1;
    Spivaty("In try block, counter: ", counter);
    Kydaty("Custom error message!");
} Piymat(e){
    counter := counter + 1;
    Spivaty("In catch block, counter:", counter);
    Spivaty("Error", e);
} Vkintsi{
    counter := counter + 1;
    Spivaty("In finally block, counter:", counter);
    Spivaty("This always runs!");
}
Spivaty("Final counter:", counter);

// Test 4
Sprobuy {
    Spivaty("Outer try");
    
    Sprobuy {
        Spivaty("Inner try");
        Kydaty("Inner error");
    } Piymat(e) {
        Spivaty("Inner catch:", e);
        Kydaty("Re-throwing from inner catch");
    }
    
} Piymat(e) {
    Spivaty("Outer catch:", e);
}

// Test 5
Zavdannya safeDivide(a, b) {
    Sprobuy {
        Yakscho(b == 0) {
            Kydaty("Cannot divide by zero, kozache!");
        }
        Povernuty a / b;
    } Piymat(e) {
        Spivaty("Division error:", e);
        Povernuty 0;
    }
}

result1 := safeDivide(10, 2);
Spivaty("10 / 2 =", result1);

result2 := safeDivide(10, 0);
Spivaty("10 / 0 =", result2);

// Test 6
Sprobuy {
    content := Chytaty("nonexistent.txt");
    Spivaty(content);
} Piymat(e) {
    Spivaty("File error:", e);
    Spivaty("Creating default file...");
    Zapysaty("nonexistent.txt", "Default content");
}

// Test 7
Zavdannya safeArrayAccess(arr, index) {
    Sprobuy {
        Povernuty arr[index];
    } Piymat(e) {
        Spivaty("Array access error:", e);
    } Vkintsi {
        Spivaty("Array access attempted");
    }
}

my_arr := [10, 20, 30];
val1 := safeArrayAccess(my_arr, 1);
Spivaty("Value at index 1:", val1);

val2 := safeArrayAccess(my_arr, 10);
Spivaty("Value at index 10:", val2);

arr23 := [[1,2,3],[4,5,6]];
Spivaty(arr23[1][2]);

arr23[0][0] := 100;
Spivaty("Modified Matrix: ", arr23);

mat := stvoryty_matrytsyu(4,5,0);
Spivaty("Empty matrix: ", mat);

Dlya (i:= 0; i < 4; i++){
    Dlya (j:= 0; j<5; j++){
        mat[i][j] := i*5+j;
    }
}
Spivaty("Filled matrix: ", mat);

size := rozmir_matrytsi(mat);
Spivaty("Rows:", size[0], "Cols:", size[1]);

// Get a specific row
row := otrymaty_ryadok(mat, 2);
Spivaty("Row 2:", row);

// Get a specific column
col := otrymaty_stovpets(mat, 3);
Spivaty("Column 3:", col);

// Transpose the matrix
transposed := transportuvaty(mat);
Spivaty("Transposed:", transposed);

board := stvoryty_matrytsyu(3, 3, "-");

Zavdannya print_board() {
    Dlya (i := 0; i < 3; i++) {
        Spivaty(board[i][0], board[i][1], board[i][2]);
    }
}

Zavdannya make_move(row, col, player) {
    Yakscho (row >= 0 && row < 3 && col >= 0 && col < 3) {
        Yakscho (board[row][col] == "-") {
            board[row][col] := player;
            Povernuty Pravda;
        }
    }
    Povernuty Nepravda;
}

// Play some moves
make_move(0, 0, "X");
make_move(1, 1, "O");
make_move(0, 1, "X");
make_move(2, 2, "O");

print_board();

// Create a 3D array (e.g., 2x3x4 cube)
cube := [
    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]],
    [[13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24]]
];

// Access 3D element
value := cube[1][2][3];  // Gets 24
Spivaty("Element at [1][2][3]:", value);

// Flatten the entire structure
flat := splushchyty(cube);
Spivaty("Flattened:", flat);

Zavdannya matrix_add(a, b) {
    rows := rozmir_matrytsi(a)[0];
    cols := rozmir_matrytsi(a)[1];
    result := stvoryty_matrytsyu(rows, cols, 0);
    
    Dlya (i := 0; i < rows; i++) {
        Dlya (j := 0; j < cols; j++) {
            result[i][j] := a[i][j] + b[i][j];
        }
    }
    
    Povernuty result;
}

Zavdannya matrix_multiply_scalar(mat, scalar) {
    rows := rozmir_matrytsi(mat)[0];
    cols := rozmir_matrytsi(mat)[1];
    result := stvoryty_matrytsyu(rows, cols, 0);
    
    Dlya (i := 0; i < rows; i++) {
        Dlya (j := 0; j < cols; j++) {
            result[i][j] := mat[i][j] * scalar;
        }
    }
    
    Povernuty result;
}

m1 := [[1, 2], [3, 4]];
m2 := [[5, 6], [7, 8]];

sum := matrix_add(m1, m2);
Spivaty("Sum:", sum);

doubled := matrix_multiply_scalar(m1, 2);
Spivaty("Doubled:", doubled);


