Chief 

// Variables and arithmetic
a := 10;
b := 5;
c := a + b * 2;
Print("a + b*2 =", c);

// Data Types
x := Int("42");
y := Float("3.14");
s := Str(123);
flag := Bool(1);
Print("Types:", x, y, s, flag);

// Logic
if_check := True && False || True;
Print("Logic check:", if_check);

// Conditions
If(a > b) {
    Print("a більший за b"); // a is greater than b
} Else_If(a < b) {
    Print("a менший за b"); // a is less than b
} Else {
    Print("a дорівнює b"); // a is equal to b
}

// Loops
i := 0;
While(i < 3) {
    Print("While loop i:", i);
    i++;
}

For(j := 0; j < 3; j := j + 1) {
    Print("For loop j:", j);
}

// Arrays and for-each
arr := [1, 2, 3];
Print("Original array:", arr);
For val each arr { // Dlya val kozhen arr
    Print("For-each value:", val);
}
append(arr, 4);
Print("After append:", arr);
insert(arr, 1, 99);
Print("After insert:", arr);
Print("Contains 2?", contains(arr, 2));
Print("Index of 99:", index_of(arr, 99));
Print("Slice arr[1:3]:", slice(arr, 1, 3));
Print("Length of arr:", length(arr)); // length (dovzhyna)
remove(arr, 1);
Print("After remove index 1:", arr);
pop_val := pop(arr);
Print("Popped value:", pop_val, "Array now:", arr);
clear(arr);
Print("After clear:", arr);

// Functions
Function greet(name) {
    Print("Hello,", name);
    Return Str("Done greeting");
}

res := greet("Kozak");
Print("Greet returned:", res);

// File Operations
Write("test.txt", "Hello Kozak!"); 
content := Read("test.txt");
Print("File content:", content);

// Input
name := Input("Enter your name: "); // Slukhai (Listen/Input)
Print("You entered:", name);

// Unary operations
count := 0;
count++;
count--;
Print("Count after ++ and --:", count);

// Powers and roots
Print("2^3 =", 2^3);
Print("27 ^/ 3 =", 27 ^/ 3);

// Random
rand_val := randint(1, 10);
Print("Random value 1-10:", rand_val);

/* Comment
    Comment */

Print("No Comment");

// OOP
Class Sobaka { // Klas (Class)
    Constructor(imya, vik) { // Tvir (Constructor)
        this.imya := imya;
        this.vik := vik;
    }

    Function Bark() {
        Print(this.imya + " woof!");
    }
}

sobaka := novyy Sobaka("Rex", 3); // new (NEW)
sobaka.Bark();

// Dictionary
slovnyk := {"imya": "Bohdan", "vik": 30, "misto": "Kyiv"};
Print(slovnyk["imya"]);

slovnyk["professiya"] := "Hetman";
Print(slovnyk["professiya"]);

klyuchi_array := keys(slovnyk); // klyuchi means "keys" - not mapped in keywords
Print(klyuchi_array);

// Polymorphism and Inheritance
Class Parent {
    Constructor() {
        this.field1 := "Parent field";
    }
    Function GetField1() {
        Print("Parent method called!");
        Return this.field1;
    }
}

Class Child : Parent {
    Function GetField2() {
        Return "Child field";
    }
}

my_object := new Child();
// These two lines are now simple statements that should require semicolons:
Print(my_object.GetField1());
// Line 20 - Test inheritance (should print Parent method called! Parent field)
Print(my_object.GetField2());
// Line 21 - Test polymorphism (should print Child field)

// Exception Handling

// Test 1
Try { // Sprobuy
    x:= 10;
    y := 0;
    res := x/y;
    Print("Res= ");
} Catch(e){ // Piymat
    Print("Error: ", e);
}

// Test 2
Try {
    arr2 := [1, 2, 3];
    Print(arr[10]);
} Catch(error_msg){
    Print("Caught error: ", error_msg);
}

// Test 3
counter := 0;
Try {
    counter := counter + 1;
    Print("In try block, counter: ", counter);
    Throw("Custom error message!"); // Kydaty
} Catch(e){
    counter := counter + 1;
    Print("In catch block, counter:", counter);
    Print("Error", e);
} Finally { // Vkintsi
    counter := counter + 1;
    Print("In finally block, counter:", counter);
    Print("This always runs!");
}
Print("Final counter:", counter);

// Test 4
Try {
    Print("Outer try");
    Try {
        Print("Inner try");
        Throw("Inner error");
    } Catch(e) {
        Print("Inner catch:", e);
        Throw("Re-throwing from inner catch");
    }
    
} Catch(e) {
    Print("Outer catch:", e);
}

// Test 5
Function safeDivide(a, b) {
    Try {
        If(b == 0) {
            throw("Cannot divide by zero, kozache!");
        }
        Return a / b;
    } Catch(e) {
        Print("Division error:", e);
        Return 0;
    }
}

result1 := safeDivide(10, 2);
Print("10 / 2 =", result1);

result2 := safeDivide(10, 0);
Print("10 / 0 =", result2);

// Test 6
Try {
    content := Read("nonexistent.txt");
    Print(content);
} Catch(e) {
    Print("File error:", e);
    Print("Creating default file...");
    Write("nonexistent.txt", "Default content");
}

// Test 7
Function safeArrayAccess(arr, index) {
    Try {
        Return arr[index];
    } Catch(e) {
        Print("Array access error:", e);
    } Finally {
        Print("Array access attempted");
    }
}

my_arr := [10, 20, 30];
val1 := safeArrayAccess(my_arr, 1);
Print("Value at index 1:", val1);

val2 := safeArrayAccess(my_arr, 10);
Print("Value at index 10:", val2);